Nonterminals useless in grammar

    assignment
    insertation


Terminals unused in grammar

    UNIT
    TEEN
    TEN
    HUNDRED
    INTEGER
    DOUBLE
    BOOLEAN
    POINT
    ID
    '='


Rules useless in grammar

   11 assignment: ID '=' expr

   12 insertation: INTEGER ID '=' expr
   13            | DOUBLE ID '=' expr
   14            | BOOLEAN ID '=' expr


State 8 conflicts: 3 shift/reduce
State 20 conflicts: 3 shift/reduce
State 21 conflicts: 3 shift/reduce
State 25 conflicts: 3 shift/reduce
State 27 conflicts: 3 shift/reduce


Grammar

    0 $accept: line $end

    1 line: expr '\n'

    2 expr: NUM
    3     | expr OPERATOR expr
    4     | expr FACT
    5     | NEG expr
    6     | expr EXP expr
    7     | LPAREN expr RPAREN
    8     | WHILE LPAREN boolexpr RPAREN expr
    9     | IF LPAREN boolexpr RPAREN expr ELSE expr

   10 boolexpr: ε


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1
    '=' (61)
    error (256)
    UNIT <value> (258)
    TEEN <value> (259)
    TEN <value> (260)
    HUNDRED <value> (261)
    INTEGER <value> (262)
    DOUBLE <value> (263)
    NUM <value> (264) 2
    BOOLEAN <value> (265)
    POINT <op> (266)
    EXP <op> (267) 6
    FACT <op> (268) 4
    NEG <op> (269) 5
    OPERATOR <op> (270) 3
    LPAREN <op> (271) 7 8 9
    RPAREN <op> (272) 7 8 9
    IF (273) 9
    WHILE (274) 8
    ELSE (275) 9
    ID <lexeme> (276)


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    line <value> (25)
        on left: 1
        on right: 0
    expr <value> (26)
        on left: 2 3 4 5 6 7 8 9
        on right: 1 3 4 5 6 7 8 9
    boolexpr <value> (27)
        on left: 10
        on right: 8 9


State 0

    0 $accept: • line $end

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    line  go to state 6
    expr  go to state 7


State 1

    2 expr: NUM •

    $default  reduce using rule 2 (expr)


State 2

    5 expr: NEG • expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 8


State 3

    7 expr: LPAREN • expr RPAREN

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 9


State 4

    9 expr: IF • LPAREN boolexpr RPAREN expr ELSE expr

    LPAREN  shift, and go to state 10


State 5

    8 expr: WHILE • LPAREN boolexpr RPAREN expr

    LPAREN  shift, and go to state 11


State 6

    0 $accept: line • $end

    $end  shift, and go to state 12


State 7

    1 line: expr • '\n'
    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15
    '\n'      shift, and go to state 16


State 8

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    5     | NEG expr •
    6     | expr • EXP expr

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15

    EXP       [reduce using rule 5 (expr)]
    FACT      [reduce using rule 5 (expr)]
    OPERATOR  [reduce using rule 5 (expr)]
    $default  reduce using rule 5 (expr)


State 9

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr
    7     | LPAREN expr • RPAREN

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15
    RPAREN    shift, and go to state 17


State 10

    9 expr: IF LPAREN • boolexpr RPAREN expr ELSE expr

    $default  reduce using rule 10 (boolexpr)

    boolexpr  go to state 18


State 11

    8 expr: WHILE LPAREN • boolexpr RPAREN expr

    $default  reduce using rule 10 (boolexpr)

    boolexpr  go to state 19


State 12

    0 $accept: line $end •

    $default  accept


State 13

    6 expr: expr EXP • expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 20


State 14

    4 expr: expr FACT •

    $default  reduce using rule 4 (expr)


State 15

    3 expr: expr OPERATOR • expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 21


State 16

    1 line: expr '\n' •

    $default  reduce using rule 1 (line)


State 17

    7 expr: LPAREN expr RPAREN •

    $default  reduce using rule 7 (expr)


State 18

    9 expr: IF LPAREN boolexpr • RPAREN expr ELSE expr

    RPAREN  shift, and go to state 22


State 19

    8 expr: WHILE LPAREN boolexpr • RPAREN expr

    RPAREN  shift, and go to state 23


State 20

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr
    6     | expr EXP expr •

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15

    EXP       [reduce using rule 6 (expr)]
    FACT      [reduce using rule 6 (expr)]
    OPERATOR  [reduce using rule 6 (expr)]
    $default  reduce using rule 6 (expr)


State 21

    3 expr: expr • OPERATOR expr
    3     | expr OPERATOR expr •
    4     | expr • FACT
    6     | expr • EXP expr

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15

    EXP       [reduce using rule 3 (expr)]
    FACT      [reduce using rule 3 (expr)]
    OPERATOR  [reduce using rule 3 (expr)]
    $default  reduce using rule 3 (expr)


State 22

    9 expr: IF LPAREN boolexpr RPAREN • expr ELSE expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 24


State 23

    8 expr: WHILE LPAREN boolexpr RPAREN • expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 25


State 24

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr
    9     | IF LPAREN boolexpr RPAREN expr • ELSE expr

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15
    ELSE      shift, and go to state 26


State 25

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr
    8     | WHILE LPAREN boolexpr RPAREN expr •

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15

    EXP       [reduce using rule 8 (expr)]
    FACT      [reduce using rule 8 (expr)]
    OPERATOR  [reduce using rule 8 (expr)]
    $default  reduce using rule 8 (expr)


State 26

    9 expr: IF LPAREN boolexpr RPAREN expr ELSE • expr

    NUM     shift, and go to state 1
    NEG     shift, and go to state 2
    LPAREN  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5

    expr  go to state 27


State 27

    3 expr: expr • OPERATOR expr
    4     | expr • FACT
    6     | expr • EXP expr
    9     | IF LPAREN boolexpr RPAREN expr ELSE expr •

    EXP       shift, and go to state 13
    FACT      shift, and go to state 14
    OPERATOR  shift, and go to state 15

    EXP       [reduce using rule 9 (expr)]
    FACT      [reduce using rule 9 (expr)]
    OPERATOR  [reduce using rule 9 (expr)]
    $default  reduce using rule 9 (expr)
